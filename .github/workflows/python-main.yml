# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Format, Lint, Test, Tag

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  format-lint-test-tag:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install coverage pytest-cov
    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run -a
    - name: Test with pytest
      run: |
        pytest --cov=parameterized
    - name: Get pytest coverage
      if: github.event_name == 'push'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          from coverage import Coverage
          cov = Coverage()
          cov.load()
          with open(os.devnull, "w") as f:
              total = cov.report(file=f)
          set_env("COVERAGE", str(int(total)))
    - name: Create coverage badge
      if: github.event_name == 'push'
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ade14e046841f505d11984a8e75385b0
        filename: Parameterized__coverage__main.json
        label: Test Coverage
        message: ${{ env.COVERAGE }}%
        color: green
    - name: Get newest semantic version
      if: github.event_name == 'push'
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          exec(open("parameterized/_version.py").read())
          set_env("NEWEST_VERSION", "v"+__version__)
    - name: Get most recent tag
      id: previoustag
      if: github.event_name == 'push'
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
    - name: Create new version tag
      if: github.event_name == 'push' && steps.previoustag.output.tag != env.NEWEST_VERSION
      uses: actions/github-script@v3.1.0
      with:
        script: |
          github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/v${{env.NEWEST_VERSION}}", 
            sha: context.sha
          })
      
